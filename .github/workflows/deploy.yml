# In this, first we are selecting the environment on the basis of branch (github.ref == 'refs/heads/main' && 'prod' || 'dev'), 
# As per the branch it will auto pick the secrets that we have created within the Environment section of github 
# this is also dpoing the same thing as main.yml but in more dynamic way, less code 
# if branch is main then it will pick Environment as prod, and in that case it will pick all the secrets of prod and deploy on prod serevr 
# Now if we want to call a workflow from existing workflow we can refer deploy-pipeline.yml (Just like one jenkins-job calls another jenkins-job)

name: environment-test-new

on:
  push:
    branches:
      #- main
      - dev
      - staging
  release:
    types: [published]
    branches:
      - main      
  workflow_dispatch:
  
    # secrets:
    #   ENVIRONMENT: 
    #   REGISTRY_LOGIN_SERVER:
    #   REGISTRY_USERNAME:
    #   REGISTRY_PASSWORD:        
    #   SERVER_HOST: 
    #   SERVER_USER: 
    #   SERVER_KEY: 
    #   SLACK_WEBHOOK_URL:      

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      #name: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
      name: ${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/staging' && 'stage' || 'dev' }}
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v3

      - name: 'Setup Azure Container Registry'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: "Build and push Docker image"
        run: |
          docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/sso-api:${{ secrets.ENVIRONMENT}}-${{ github.run_number }}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/sso-api:${{ secrets.ENVIRONMENT}}-${{ github.run_number }}

      - name: Deploy container to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          script: |
            cd /home/ubuntu/services/sso-api
            ls -al 
            cat variables.env
# We can execute workflow_helper.sh script over here             


      # - name: Send Slack notification
      #   if: always()
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
      #     SLACK_MESSAGE: "Status: ${{ job.status }}\nBranch: ${{ env.GITHUB_REF_NAME }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
      #     SLACK_FOOTER: "Dayatani"
      #     SLACK_COLOR: ${{ job.status }}
      #     MSG_MINIMAL: event,actions url
